@using Dotnet_Dietitian.Application.Features.CQRS.Results.DiyetisyenResults
@using Dotnet_Dietitian.Application.Features.CQRS.Results.RandevuResults
@model GetDiyetisyenByIdQueryResult
@{
    ViewData["Title"] = "Randevular - DijetUP";
    Layout = "_DietitianLayout";
    var randevular = ViewBag.Randevular as List<GetRandevuQueryResult> ?? new List<GetRandevuQueryResult>();
    var showPast = ViewData["ShowPast"] as bool? ?? false;
}

@* CSRF koruması için token *@
@Html.AntiForgeryToken()

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="fw-bold mb-0">Randevular</h2>
        <p class="text-muted">Yaklaşan ve geçmiş randevularınızı yönetin</p>
    </div>
    @if (Model.Hastalar != null && Model.Hastalar.Any())
    {
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#newAppointmentModal">
            <i class="bi bi-plus-circle me-2"></i> Yeni Randevu
        </button>
    }
    else
    {
        <button class="btn btn-success" disabled title="Önce hasta eklemelisiniz">
            <i class="bi bi-plus-circle me-2"></i> Yeni Randevu
        </button>
    }
</div>

<!-- Calendar and Appointments Tabs -->
<ul class="nav nav-tabs mb-4" id="appointmentsTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="list-tab" data-bs-toggle="tab" data-bs-target="#list" type="button" role="tab" aria-controls="list" aria-selected="true">
            <i class="bi bi-list-ul me-2"></i>Liste Görünümü
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="calendar-tab" data-bs-toggle="tab" data-bs-target="#calendar" type="button" role="tab" aria-controls="calendar" aria-selected="false">
            <i class="bi bi-calendar3 me-2"></i>Takvim Görünümü
        </button>
    </li>
</ul>

<!-- Tabs Content -->
<div class="tab-content" id="appointmentsTabsContent">
    <!-- List View -->
    <div class="tab-pane fade show active" id="list" role="tabpanel" aria-labelledby="list-tab">
        <!-- Filters -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text bg-light border-0"><i class="bi bi-search"></i></span>
                            <input type="text" id="searchAppointment" class="form-control border-0 bg-light" placeholder="Hasta adına göre ara...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select bg-light border-0" id="filterStatus">
                            <option value="">Tüm Durumlar</option>
                            <option value="Bekliyor">Beklemede</option>
                            <option value="Onaylandı">Onaylandı</option>
                            <option value="İptal Edildi">İptal Edildi</option>
                            <option value="Tamamlandı">Tamamlandı</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select bg-light border-0" id="filterDateRange">
                            <option value="upcoming" selected="@(!showPast)">Gelecek Randevular</option>
                            <option value="past" selected="@(showPast)">Geçmiş Randevular</option>
                            <option value="all">Tüm Randevular</option>
                            <option value="today">Bugün</option>
                            <option value="week">Bu Hafta</option>
                            <option value="month">Bu Ay</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-light w-100" id="refreshAppointments">
                            <i class="bi bi-arrow-clockwise me-2"></i>Yenile
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Appointments List -->
        <div class="card border-0 shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th class="ps-4">Hasta</th>
                                <th>Tarih & Saat</th>
                                <th>Tür</th>
                                <th>Durum</th>
                                <th class="text-end pe-4">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody id="appointmentsTableBody">
                            @if (randevular.Any())
                            {
                                @foreach (var randevu in randevular)
                                {
                                    <tr data-id="@randevu.Id" data-status="@randevu.Durum">
                                        <td class="ps-4">
                                            <div class="d-flex align-items-center">
                                                <div class="rounded-circle bg-light d-flex align-items-center justify-content-center me-3" style="width:40px;height:40px">
                                                    <i class="bi bi-person text-secondary"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">@randevu.HastaAdSoyad</h6>
                                                    <small class="text-muted">ID: @randevu.HastaId.ToString().Substring(0, 5)...</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div>@randevu.RandevuBaslangicTarihi.ToShortDateString()</div>
                                            <small class="text-muted">@randevu.RandevuBaslangicTarihi.ToString("HH:mm") - @randevu.RandevuBitisTarihi.ToString("HH:mm")</small>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(randevu.RandevuTuru))
                                            {
                                                <span class="badge bg-info">@randevu.RandevuTuru</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Belirtilmemiş</span>
                                            }
                                        </td>
                                        <td>
                                            @{
                                                var statusClass = randevu.Durum switch
                                                {
                                                    "Onaylandı" => "bg-success",
                                                    "Beklemede" => "bg-warning text-dark",
                                                    "İptal Edildi" => "bg-danger",
                                                    "Tamamlandı" => "bg-primary",
                                                    _ => "bg-secondary"
                                                };
                                            }
                                            <span class="badge @statusClass">@randevu.Durum</span>
                                        </td>
                                        <td class="text-end pe-4">
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-outline-primary view-appointment-btn" data-id="@randevu.Id">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary edit-appointment-btn" data-id="@randevu.Id">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="bi bi-three-dots"></i>
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end">
                                                    <li><a class="dropdown-item status-action" href="#" data-id="@randevu.Id" data-status="Onaylandı"><i class="bi bi-check-circle me-2"></i>Onayla</a></li>
                                                    <li><a class="dropdown-item status-action" href="#" data-id="@randevu.Id" data-status="Tamamlandı"><i class="bi bi-check2-all me-2"></i>Tamamlandı</a></li>
                                                    <li><a class="dropdown-item text-danger status-action" href="#" data-id="@randevu.Id" data-status="İptal Edildi"><i class="bi bi-x-circle me-2"></i>İptal Et</a></li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center py-4">
                                        <p class="text-muted mb-0">
                                            @(showPast ? "Geçmiş randevunuz bulunmuyor." : "Yaklaşan randevunuz bulunmuyor.")
                                        </p>
                                        @if (Model.Hastalar != null && Model.Hastalar.Any())
                                        {
                                            <button class="btn btn-sm btn-success mt-2" data-bs-toggle="modal" data-bs-target="#newAppointmentModal">
                                                <i class="bi bi-plus-circle me-1"></i> Yeni Randevu
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-success mt-2" disabled title="Önce hasta eklemelisiniz">
                                                <i class="bi bi-plus-circle me-1"></i> Yeni Randevu
                                            </button>
                                            <p class="text-danger small mt-2">Henüz kayıtlı hastanız bulunmuyor. Önce hasta eklemelisiniz.</p>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar View -->
    <div class="tab-pane fade" id="calendar" role="tabpanel" aria-labelledby="calendar-tab">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div id="appointmentsCalendar"></div>
            </div>
        </div>
    </div>
</div>

<!-- New Appointment Modal -->
<div class="modal fade" id="newAppointmentModal" tabindex="-1" aria-labelledby="newAppointmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newAppointmentModalLabel">Yeni Randevu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newAppointmentForm">
                    @Html.AntiForgeryToken()
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label class="form-label">Hasta</label>
                            <select class="form-select" id="patientId" name="hastaId" required>
                                <option value="" selected disabled>Hasta Seçin</option>
                                @if (Model.Hastalar != null && Model.Hastalar.Any())
                                {
                                    @foreach (var hasta in Model.Hastalar)
                                    {
                                        <option value="@hasta.Id">@hasta.Ad @hasta.Soyad</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled>Hasta bulunamadı</option>
                                }
                            </select>
                            @if (Model.Hastalar == null || !Model.Hastalar.Any())
                            {
                                <small class="text-danger">Henüz kayıtlı hastanız bulunmuyor. Önce hasta eklemelisiniz.</small>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Randevu Tarihi</label>
                            <input type="date" class="form-control" id="appointmentDate" required>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Başlangıç Saati</label>
                            <input type="time" class="form-control" id="startTime" required>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Bitiş Saati</label>
                            <input type="time" class="form-control" id="endTime" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Randevu Türü</label>
                            <select class="form-select" id="appointmentType" name="randevuTuru">
                                <option value="">Seçiniz</option>
                                <option value="İlk Görüşme">İlk Görüşme</option>
                                <option value="Kontrol">Kontrol</option>
                                <option value="Diyet Planı">Diyet Planı</option>
                                <option value="Danışmanlık">Danışmanlık</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Durum</label>
                            <select class="form-select" id="status" name="durum" required>
                                <option value="Beklemede">Beklemede</option>
                                <option value="Onaylandı">Onaylandı</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Notlar</label>
                            <textarea class="form-control" id="notes" name="notlar" rows="3"></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-success" id="saveAppointmentBtn">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- View/Edit Appointment Modal -->
<div class="modal fade" id="viewAppointmentModal" tabindex="-1" aria-labelledby="viewAppointmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewAppointmentModalLabel">Randevu Detayları</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="appointmentDetails">
                    <!-- Appointment details will be loaded here -->
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Yükleniyor...</span>
                        </div>
                        <p class="mt-2">Randevu detayları yükleniyor...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="editAppointmentBtn">Düzenle</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.0/main.min.css" rel="stylesheet">
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.0/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.0/locales/tr.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Hasta listesi kontrolü
            const patientSelect = document.getElementById('patientId');
            const saveAppointmentBtn = document.getElementById('saveAppointmentBtn');
            
            // Eğer hasta listesi boşsa randevu oluşturma butonunu devre dışı bırak
            if (patientSelect && saveAppointmentBtn) {
                const hasPatients = patientSelect.options.length > 1; // İlk option "Hasta Seçin" olduğu için 1'den büyük olmalı
                
                if (!hasPatients) {
                    saveAppointmentBtn.disabled = true;
                    saveAppointmentBtn.title = "Önce hasta eklemelisiniz";
                }
            }

            // Randevu kaydetme butonunu temelden yeniden yazalım
            if (saveAppointmentBtn) {
                saveAppointmentBtn.onclick = function() {
                    try {
                        console.log('Kaydet butonuna tıklandı - yeni işleyici');
                        
                        // Form verilerini topla
                        const patientId = document.getElementById('patientId').value;
                        const appointmentDate = document.getElementById('appointmentDate').value;
                        const startTime = document.getElementById('startTime').value;
                        const endTime = document.getElementById('endTime').value;
                        const appointmentType = document.getElementById('appointmentType').value;
                        const status = document.getElementById('status').value;
                        const notes = document.getElementById('notes').value;
                        
                        console.log('Form değerleri:', { patientId, appointmentDate, startTime, endTime, appointmentType, status, notes });
                        
                        // Zorunlu alanları kontrol et
                        if (!patientId || !appointmentDate || !startTime || !endTime) {
                            alert('Lütfen gerekli alanları doldurun.');
                            return;
                        }
                        
                        // Tarih ve saatleri oluştur (zaman dilimi farkını dikkate alarak)
                        const startDateTime = new Date(`${appointmentDate}T${startTime}`);
                        const endDateTime = new Date(`${appointmentDate}T${endTime}`);
                        
                        // Tarih ve saatleri ISO formatına dönüştürürken zaman dilimi farkını hesaba kat
                        const timezoneOffset = startDateTime.getTimezoneOffset() * 60000; // Dakika cinsinden offset'i milisaniyeye çevir
                        
                        // Zaman dilimi farkını eklenen tarihler oluştur
                        const startDateTimeUTC = new Date(startDateTime.getTime() - timezoneOffset);
                        const endDateTimeUTC = new Date(endDateTime.getTime() - timezoneOffset);
                        
                        console.log('Tarih ve saat:', { 
                            localStartDateTime: startDateTime,
                            localEndDateTime: endDateTime,
                            startDateTimeUTC: startDateTimeUTC.toISOString(), 
                            endDateTimeUTC: endDateTimeUTC.toISOString() 
                        });
                        
                        // Saatleri kontrol et
                        if (endDateTime <= startDateTime) {
                            alert('Bitiş saati başlangıç saatinden sonra olmalıdır.');
                            return;
                        }
                        
                        // Randevu verilerini oluştur
                        const appointmentData = {
                            HastaId: patientId,
                            RandevuBaslangicTarihi: startDateTimeUTC.toISOString(),
                            RandevuBitisTarihi: endDateTimeUTC.toISOString(),
                            RandevuTuru: appointmentType,
                            Durum: status,
                            DiyetisyenOnayi: status === 'Onaylandı',
                            HastaOnayi: true,
                            Notlar: notes
                        };
                        
                        console.log('Gönderilecek veri:', appointmentData);
                        console.log('URL:', '@Url.Action("CreateAppointment", "Dietitian")');
                        
                        // AJAX ile verileri gönder
                        $.ajax({
                            url: '@Url.Action("CreateAppointment", "Dietitian")',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(appointmentData),
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function(response) {
                                console.log('Başarılı yanıt:', response);
                                if (response.success) {
                                    alert(response.message);
                                    window.location.reload();
                                } else {
                                    alert(response.message || 'İşlem sırasında bir hata oluştu.');
                                }
                            },
                            error: function(xhr, status, error) {
                                console.error('AJAX hatası:', xhr, status, error);
                                alert('Randevu oluşturulurken bir hata oluştu. Lütfen tekrar deneyin.');
                            }
                        });
                    } catch (error) {
                        console.error('JavaScript hatası:', error);
                        alert('Beklenmeyen bir hata oluştu: ' + error.message);
                    }
                };
            }
            
            // Calendar initialization
            const calendarEl = document.getElementById('appointmentsCalendar');
            if (calendarEl) {
                const calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay'
                    },
                    locale: 'tr',
                    buttonText: {
                        today: 'Bugün',
                        month: 'Ay',
                        week: 'Hafta',
                        day: 'Gün'
                    },
                    events: [
                        // Randevu verileri
                        @if (randevular.Any())
                        {
                            foreach (var randevu in randevular)
                            {
                                var color = randevu.Durum switch
                                {
                                    "Onaylandı" => "#198754",
                                    "Beklemede" => "#ffc107",
                                    "İptal Edildi" => "#dc3545",
                                    "Tamamlandı" => "#0d6efd",
                                    _ => "#6c757d"
                                };
                                
                                <text>
                                {
                                    title: '@randevu.HastaAdSoyad',
                                    start: '@randevu.RandevuBaslangicTarihi.ToString("yyyy-MM-ddTHH:mm:ss")',
                                    end: '@randevu.RandevuBitisTarihi.ToString("yyyy-MM-ddTHH:mm:ss")',
                                    extendedProps: {
                                        id: '@randevu.Id',
                                        status: '@randevu.Durum',
                                        type: '@randevu.RandevuTuru'
                                    },
                                    backgroundColor: '@color',
                                    borderColor: '@color'
                                },
                                </text>
                            }
                        }
                    ],
                    eventClick: function(info) {
                        // Tıklanan randevu detaylarını göster
                        const appointmentId = info.event.extendedProps.id;
                        showAppointmentDetails(appointmentId);
                    },
                    dateClick: function(info) {
                        // Yeni randevu oluştur
                        const modal = new bootstrap.Modal(document.getElementById('newAppointmentModal'));
                        document.getElementById('appointmentDate').value = info.dateStr;
                        modal.show();
                    }
                });
                
                calendar.render();
                
                // Tab changed event (render calendar when tab becomes visible)
                document.getElementById('calendar-tab').addEventListener('shown.bs.tab', function() {
                    calendar.updateSize();
                });
            }
            
            // Sayfa yüklendiğinde bugünün tarihini randevu tarih alanına otomatik doldur
            const appointmentDateInput = document.getElementById('appointmentDate');
            if (appointmentDateInput) {
                const today = new Date();
                const formattedDate = today.toISOString().split('T')[0];
                appointmentDateInput.value = formattedDate;
                
                // Varsayılan saat değerlerini de ayarla
                const now = new Date();
                now.setMinutes(Math.ceil(now.getMinutes() / 15) * 15); // En yakın 15 dakikaya yuvarla
                
                const startTimeInput = document.getElementById('startTime');
                if (startTimeInput) {
                    startTimeInput.value = now.toTimeString().slice(0, 5);
                }
                
                const endTimeInput = document.getElementById('endTime');
                if (endTimeInput) {
                    const endTime = new Date(now);
                    endTime.setMinutes(now.getMinutes() + 30); // 30 dakika sonrası
                    endTimeInput.value = endTime.toTimeString().slice(0, 5);
                }
            }
            
            // Filter date range change
            const filterDateRange = document.getElementById('filterDateRange');
            if (filterDateRange) {
                filterDateRange.addEventListener('change', function() {
                    if (this.value === 'past') {
                        window.location.href = '@Url.Action("Appointments", "Dietitian", new { showPast = true })';
                    } else if (this.value === 'upcoming') {
                        window.location.href = '@Url.Action("Appointments", "Dietitian", new { showPast = false })';
                    }
                });
            }
            
            // Search appointments
            const searchAppointment = document.getElementById('searchAppointment');
            if (searchAppointment) {
                searchAppointment.addEventListener('keyup', function() {
                    const searchValue = this.value.toLowerCase();
                    const rows = document.querySelectorAll('#appointmentsTableBody tr');
                    
                    rows.forEach(row => {
                        const patientName = row.querySelector('h6')?.innerText.toLowerCase() || '';
                        if (patientName.includes(searchValue)) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    });
                });
            }
            
            // Filter by status
            const filterStatus = document.getElementById('filterStatus');
            if (filterStatus) {
                filterStatus.addEventListener('change', function() {
                    const statusValue = this.value.toLowerCase();
                    const rows = document.querySelectorAll('#appointmentsTableBody tr');
                    
                    rows.forEach(row => {
                        if (!statusValue || row.dataset.status.toLowerCase() === statusValue) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    });
                });
            }
            
            // Refresh button
            const refreshAppointments = document.getElementById('refreshAppointments');
            if (refreshAppointments) {
                refreshAppointments.addEventListener('click', function() {
                    window.location.reload();
                });
            }
            
            // Status action buttons
            const statusActions = document.querySelectorAll('.status-action');
            statusActions.forEach(action => {
                action.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const appointmentId = this.dataset.id;
                    const status = this.dataset.status;
                    
                    if (confirm(`Randevu durumunu "${status}" olarak değiştirmek istediğinize emin misiniz?`)) {
                        // Send AJAX request
                        fetch('@Url.Action("UpdateAppointmentStatus", "Dietitian")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                Id: appointmentId,
                                Status: status
                            })
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Sunucu yanıt vermedi. Lütfen daha sonra tekrar deneyin.');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                alert(data.message);
                                window.location.reload();
                            } else {
                                alert(data.message || 'İşlem sırasında bir hata oluştu.');
                            }
                        })
                        .catch(error => {
                            console.error('Hata detayı:', error);
                            alert('Bir hata oluştu: ' + error.message);
                        });
                    }
                });
            });
            
            // View appointment buttons
            const viewAppointmentBtns = document.querySelectorAll('.view-appointment-btn');
            viewAppointmentBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const appointmentId = this.dataset.id;
                    showAppointmentDetails(appointmentId);
                });
            });
            
            // Function to show appointment details
            function showAppointmentDetails(appointmentId) {
                const modal = new bootstrap.Modal(document.getElementById('viewAppointmentModal'));
                modal.show();
                
                // Randevu detaylarını getir
                fetch(`@Url.Action("GetAppointmentDetails", "Dietitian")?id=${appointmentId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const randevu = data.data;
                            const startDate = new Date(randevu.randevuBaslangicTarihi);
                            const endDate = new Date(randevu.randevuBitisTarihi);
                            
                            // Durum sınıfını belirle
                            const statusClass = {
                                'Onaylandı': 'success',
                                'Beklemede': 'warning',
                                'İptal Edildi': 'danger',
                                'Tamamlandı': 'primary'
                            }[randevu.durum] || 'secondary';
                            
                            // Detayları HTML olarak oluştur
                            document.getElementById('appointmentDetails').innerHTML = `
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6 class="fw-bold mb-3">Hasta Bilgileri</h6>
                                        <p class="mb-1"><strong>Ad Soyad:</strong> ${randevu.hastaAdSoyad}</p>
                                        <p class="mb-3"><strong>ID:</strong> ${randevu.hastaId}</p>
                                        
                                        <h6 class="fw-bold mb-3">Randevu Bilgileri</h6>
                                        <p class="mb-1"><strong>Tarih:</strong> ${startDate.toLocaleDateString()}</p>
                                        <p class="mb-1"><strong>Saat:</strong> ${startDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} - ${endDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p>
                                        <p class="mb-1"><strong>Tür:</strong> ${randevu.randevuTuru || 'Belirtilmemiş'}</p>
                                        <p class="mb-1"><strong>Durum:</strong> <span class="badge bg-${statusClass}">${randevu.durum}</span></p>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="fw-bold mb-3">Onay Durumu</h6>
                                        <p class="mb-1"><strong>Diyetisyen Onayı:</strong> ${randevu.diyetisyenOnayi ? '<span class="text-success">Onaylandı</span>' : '<span class="text-warning">Beklemede</span>'}</p>
                                        <p class="mb-3"><strong>Hasta Onayı:</strong> ${randevu.hastaOnayi ? '<span class="text-success">Onaylandı</span>' : '<span class="text-warning">Beklemede</span>'}</p>
                                        
                                        <h6 class="fw-bold mb-3">Notlar</h6>
                                        <div class="p-3 bg-light rounded">
                                            ${randevu.notlar || 'Not bulunmuyor.'}
                                        </div>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">Oluşturulma Tarihi: ${new Date(randevu.yaratilmaTarihi).toLocaleString()}</small>
                                        <div>
                                            <button class="btn btn-sm btn-outline-success status-action-modal" data-id="${randevu.id}" data-status="Onaylandı">
                                                <i class="bi bi-check-circle me-1"></i> Onayla
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger status-action-modal" data-id="${randevu.id}" data-status="İptal Edildi">
                                                <i class="bi bi-x-circle me-1"></i> İptal Et
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            `;
                            
                            // Modal içindeki durum değiştirme butonlarına event listener ekle
                            document.querySelectorAll('.status-action-modal').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    const id = this.dataset.id;
                                    const status = this.dataset.status;
                                    
                                    if (confirm(`Randevu durumunu "${status}" olarak değiştirmek istediğinize emin misiniz?`)) {
                                        // Send AJAX request
                                        fetch('@Url.Action("UpdateAppointmentStatus", "Dietitian")', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json',
                                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                            },
                                            body: JSON.stringify({
                                                Id: id,
                                                Status: status
                                            })
                                        })
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error('Sunucu yanıt vermedi. Lütfen daha sonra tekrar deneyin.');
                                            }
                                            return response.json();
                                        })
                                        .then(data => {
                                            if (data.success) {
                                                alert(data.message);
                                                window.location.reload();
                                            } else {
                                                alert(data.message || 'İşlem sırasında bir hata oluştu.');
                                            }
                                        })
                                        .catch(error => {
                                            console.error('Hata detayı:', error);
                                            alert('Bir hata oluştu: ' + error.message);
                                        });
                                    }
                                });
                            });
                        } else {
                            document.getElementById('appointmentDetails').innerHTML = `
                                <div class="alert alert-danger">
                                    ${data.message}
                                </div>
                            `;
                        }
                    })
                    .catch(error => {
                        document.getElementById('appointmentDetails').innerHTML = `
                            <div class="alert alert-danger">
                                Bir hata oluştu: ${error.message}
                            </div>
                        `;
                    });
            }
        });
    </script>
}

